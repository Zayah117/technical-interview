QUESTION 1
Time: O(n)
Space: O(1)

Use python's count() function to create dictonaries with letter counts from each word.
Then compare the dictonaries to find anagrams.

QUESTION 2
Time: O(n)
Space: O(n)

Implemented Manacher's Algorithm as explained here: http://www.geeksforgeeks.org/manachers-algorithm-linear-time-longest-palindromic-substring-part-1/

QUESTION 3
Time: O(nm)?
Space: O(n)

This is a greedy algorithm. It works by starting with an empty graph, S, and then adding on to S
until S has as many vertices as G. As the program loops, it finds the shortest edge that connects
a vertex of S to a vertex of G-S, and then adds the new 'short edge' and 'short vertex' to S.

QUESTION 4
Time: O(log n)
Space: O(log n)

First get all ancestors of n1 and n2, then compare ancestors in ascending order until a match is found.

QUESTION 5
Time: O(n)
Space: O(1)

First find the length of the list, then find the target node by moving to the 'list_length - m' position.